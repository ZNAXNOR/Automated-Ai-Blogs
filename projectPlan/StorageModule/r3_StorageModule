# üß† Round 3 (r3_draft) ‚Äî Storage Integration Plan

## üîç Overview

**r3_draft** transforms validated and filtered topic angles (from r2) into **first-draft articles** using structured AI generation.  
This round creates the **first long-form draft** for each article and stores both the full generated draft and essential metadata.

Unlike r2, which only references external links or ideas, **r3** produces tangible content that will be further polished in r4.  
It is therefore a key round for **GCS content persistence** and **Firestore cross-referencing**.

---

## üß± Core Responsibilities

| Storage Type  | Purpose                           | Data Type                                | Example Path                                      |
| ------------- | --------------------------------- | ---------------------------------------- | ------------------------------------------------- |
| **GCS**       | Full article draft (AI-generated) | `r3_draft` JSON artifact                 | `gs://ai-blog-bucket/drafts/{pipelineId}_r3.json` |
| **Firestore** | Draft metadata & references       | articleId, title, sourceRefs, timestamps | `/drafts/{pipelineId}/r3_meta`                    |

---

## üß© Data Flow

1. **Receive Input:**
   From r2 ‚Äî validated topic data and external references.

2. **Generate Draft:**
   AI output structured as:
    ```ts
    interface R3DraftOutput {
        pipelineId: string;
        topic: string;
        title: string;
        references: string[];
        draft: string;
        summary: string;
        createdAt: string;
    }
    ```

3. **Inline Subflow ‚Äî `r3_storage_inline`:**
   Create an **inline Genkit subflow** (traceable in UI) that handles:

   * Upload to **GCS**

     * Save complete draft JSON artifact.
     * Path format:

       ```
       gs://ai-blog-bucket/drafts/{pipelineId}_r3.json
       ```
   * Update **Firestore**

     * Save only lightweight metadata:

       ```ts
       {
         pipelineId: string;
         title: string;
         topic: string;
         referenceCount: number;
         storagePath: string;
         createdAt: string;
         status: 'in_review';
       }
       ```
     * Collection: `/drafts`
     * Document ID: `{pipelineId}`
     * Subcollection: `/r3_meta`

4. **Cross-Linking:**

   * Firestore document includes `storagePath` ‚Üí pointing to the GCS draft artifact.
   * GCS file name embeds `pipelineId` and round identifier for traceability.

5. **Response Object:**
   Returned by subflow and logged in Genkit trace:

   ```ts
   {
     pipelineId: string;
     firestoreId: string;
     gcsPath: string;
     title: string;
     referenceCount: number;
     timestamp: string;
   }
   ```

---

## üß∞ Required Imports

From previously implemented modules:

```ts
import { db, collections } from '../clients/firestore.client';
import { bucket, uploadJSON } from '../clients/gcs.client';
import { makeGCSPath } from '../helpers/gcs.helpers';
import { GCSArtifactSchema } from '../schemas/gcs.schema';
```

---

## üß± Expected Output File

**File:** `flows/r3_storage.flow.ts`

The inline subflow should:

* Be named `r3_storage_inline`
* Execute inside the main `r3_draft` flow
* Be visible in **Genkit UI** trace
* Handle:

  * Upload JSON draft ‚Üí GCS
  * Write metadata ‚Üí Firestore
  * Return structured confirmation response

---

## üß™ Emulator Integration

* If **Firebase Emulator** is running, automatically use local Firestore + Storage endpoints.
* Maintain the same `gs://` path naming for uniformity, even in local mode.

---

## üí° Example Invocation

```ts
import { saveR3DraftResult } from './flows/r3_storage.flow';

const result = await saveR3DraftResult({
  pipelineId: 'topic_456',
  topic: 'AI and Creativity in Marketing',
  title: 'Can AI Truly Be Creative?',
  references: [
    'https://example.com/ai-marketing-2024',
    'https://news.google.com/article?id=abc123'
  ],
  draft: 'Artificial intelligence has evolved beyond analytics...',
  summary: 'This draft explores how generative AI challenges traditional creativity models.',
  createdAt: new Date().toISOString(),
});

console.log('r3 storage confirmation:', result);
```

---

## üß© Notes

* **Firestore segmentation:** `/drafts` (new main-level collection)
* **GCS segmentation:** `/drafts/` (clear separation from `/topics/`)
* **Inline Subflow:** named `r3_storage_inline` for trace visibility
* **No duplicate storage of full content in Firestore** ‚Äî only metadata
* **Design** is future-compatible with the orchestrator schema in later rounds

---

## ‚úÖ Deliverable

Generate a complete **TypeScript implementation** of:
`flows/r3_storage.flow.ts`